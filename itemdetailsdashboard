import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'addScreenPage.dart';
import 'db_helper.dart';
import 'item_model.dart';
import 'dashboardPage.dart';
import 'profilePage.dart'; // Import profile page to navigate to

class itemDashboard extends StatefulWidget {
  final int userId;
  const itemDashboard({super.key, required this.userId});

  @override
  State<itemDashboard> createState() => _itemDashboardState();
}

class _itemDashboardState extends State<itemDashboard> {
  List<Item> itemList = [];

  int _selectedIndex = 1; // This tab is "Search" (itemDashboard)

  @override
  void initState() {
    super.initState();
    _loadItems();
  }

  void _loadItems() async {
    final rawData = await DatabaseHelper().getExpenses(widget.userId);

    setState(() {
      itemList = rawData
          .map(
            (data) => Item(
          id: data['id'],
          name: data['name'],
          category: data['category'],
          amt: data['amount'],
          qty: (data['quantity'] as num).toInt(),
          date: DateFormat('yyyy-MM-dd').parse(data['date']), // Fixed: 'MM' uppercase for month
          description: data['description'] ?? '',
        ),
      )
          .toList();
    });
  }

  void _deleteItem(int itemId) async {
    await DatabaseHelper().deleteExpense(itemId);
    _loadItems();
  }

  double _calaculateTotalSpent() {
    return itemList.fold(0.0, (sum, item) => sum + item.amt);
  }

  void _onItemTapped(int index) {
    if (index == _selectedIndex) return;

    if (index == 0) {
      // Navigate to dashboardPage (Home)
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => dashboardPage(userId: widget.userId),
        ),
      );
    } else if (index == 1) {
      // Already on itemDashboard
    } else if (index == 2) {
      // Navigate to profilePage
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => profilePage(userId: widget.userId),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new),
          color: Color(0xFFF7F4F2),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title: const Text(
          "Item Details",
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: const Color(0xFF010080),
        elevation: 0,
      ),
      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFD3E3FD), Color(0xFFFFFFFF), Color(0xFF505AD8)],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
          color: Color(0xFFFFFFFF),
        ),
        child: itemList.isEmpty
            ? Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.inbox, size: 80, color: Colors.grey),
              SizedBox(height: 16),
              Text("No items found",
                  style:
                  TextStyle(fontSize: 20, color: Colors.grey[600])),
              SizedBox(height: 8),
              Text("Tap + to add your first expense!",
                  style:
                  TextStyle(fontSize: 16, color: Colors.grey[500])),
            ],
          ),
        )
            : ListView.separated(
          itemCount: itemList.length,
          itemBuilder: (context, index) {
            final item = itemList[index];
            return Padding(
              padding: const EdgeInsets.all(8.0),
              child: SizedBox(
                height: 160,
                child: Card(
                  shadowColor: Colors.black,
                  surfaceTintColor: Colors.white,
                  color: Color(0xFFFFFFFF),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  elevation: 10,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Text(
                              item.name,
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Spacer(),
                            Align(
                              alignment: Alignment.topRight,
                              child: Row(
                                children: [
                                  Padding(
                                      padding: const EdgeInsets.symmetric(
                                        horizontal: 25.0,
                                      ),
                                      child: MouseRegion(
                                        cursor: SystemMouseCursors.click,
                                        child: GestureDetector(
                                          onTap: () async {
                                            final updated =
                                            await Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                builder: (context) =>
                                                    addScreenPage(
                                                        userId:
                                                        widget.userId,
                                                        item: item),
                                              ),
                                            );
                                            if (updated == true) {
                                              _loadItems();
                                            }
                                          },
                                          child: Icon(Icons.edit,
                                              color: Colors.indigo),
                                        ),
                                      )),
                                  MouseRegion(
                                    cursor: SystemMouseCursors.click,
                                    child: GestureDetector(
                                      onTap: () {
                                        _deleteItem(item.id);
                                        ScaffoldMessenger.of(context)
                                            .showSnackBar(
                                          SnackBar(
                                            content: Text(
                                                "Item deleted successfully."),
                                            backgroundColor:
                                            Colors.black87,
                                            duration:
                                            Duration(seconds: 2),
                                          ),
                                        );
                                      },
                                      child: Icon(Icons.delete,
                                          color: Color(0xFFF75464)),
                                    ),
                                  )
                                ],
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 4),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: Container(
                            child: Text(
                              item.category,
                              style: TextStyle(color: Colors.grey),
                            ),
                          ),
                        ),
                        SizedBox(height: 8),
                        Row(
                          mainAxisAlignment:
                          MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              'Rs.${item.amt.toStringAsFixed(2)}',
                              style: TextStyle(color: Color(0xFF7F7F7F)),
                            ),
                            Text(
                              'Qty: ${item.qty}',
                              style: TextStyle(color: Color(0xFF7F7F7F)),
                            ),
                            Row(
                              children: [
                                Icon(
                                  Icons.calendar_month,
                                  color: Colors.indigo,
                                ),
                                SizedBox(width: 8),
                                Text(
                                  DateFormat('dd-MM-yyyy').format(item.date),
                                  style: TextStyle(color: Color(0xFF7F7F7F)),
                                ),
                              ],
                            ),
                          ],
                        ),
                        if (item.description.isNotEmpty) ...[
                          SizedBox(height: 12),
                          Text(
                            item.description,
                            style: TextStyle(
                              color: Colors.grey[700],
                              fontWeight: FontWeight.w100,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
          separatorBuilder: (context, index) => SizedBox(height: 2),
        ),
      ),

      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        backgroundColor: Color(0xFF010080), // Your app's blue background
        selectedItemColor: Colors.white,     // White for selected icon & label
        unselectedItemColor: Colors.white70,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home_filled), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Item Details'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),

      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        backgroundColor: Color(0xFF010080),
        foregroundColor: Color(0xFFFFF7FE),
        tooltip: 'Add Expense',
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => addScreenPage(userId: widget.userId),
            ),
          ).then((_) => _loadItems()); // Refresh list after return
        },
      ),
    );
  }
}



