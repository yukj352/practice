import 'dart:io';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart'; // ðŸ‘ˆ FFI for Windows
import 'dart:convert';
import 'package:crypto/crypto.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  DatabaseHelper._internal();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) {
      return _database!;
    }

    // âœ… Ensure FFI is initialized on desktop
    if (Platform.isWindows || Platform.isLinux) {
      sqfliteFfiInit();
      databaseFactory = databaseFactoryFfi;
    }

    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    Directory dir = await getApplicationDocumentsDirectory();
    String path = join(dir.path, 'expense_tracker.db');
    return await databaseFactory.openDatabase(
      path,
      options: OpenDatabaseOptions(
        version: 1,
        onCreate: _onCreate,
      ),
    );
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('''
    CREATE TABLE USERS(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT NOT NULL UNIQUE,
      password TEXT NOT NULL
    );
    ''');

    await db.execute('''
    CREATE TABLE EXPENSES(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      userId INTEGER,
      name TEXT,
      category TEXT,
      amount REAL,
      quantity REAL,
      date TEXT,
      description TEXT
    );
    ''');
  }

  String hashPassword(String password) {
    final bytes = utf8.encode(password);
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  Future<int> insertUser(String name, String email, String password) async {
    final db = await database;
    final hashedPassword = hashPassword(password);
    return await db.insert('USERS', {
      'name': name,
      'email': email,
      'password': hashedPassword,
    });
  }

  Future<Map<String, dynamic>?> authenticate(String email, String password) async {
    final db = await database;
    final hashedPassword = hashPassword(password);
    List<Map<String, dynamic>> result = await db.query(
      'USERS',
      where: 'email = ? AND password = ?',
      whereArgs: [email, hashedPassword],
    );
    return result.isNotEmpty ? result.first : null;
  }

  Future<int> addExpense(Map<String, dynamic> data) async {
    final db = await database;
    return await db.insert('EXPENSES', data);
  }

  Future<List<Map<String, dynamic>>> getExpenses(int userId) async {
    final db = await database;
    return await db.query(
      'EXPENSES',
      where: 'userId = ?',
      whereArgs: [userId],
      orderBy: 'date DESC',
    );
  }

  Future<int> deleteExpense(int id) async {
    final db = await database;
    return await db.delete(
      'EXPENSES',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<int> updateExpense(Map<String, dynamic> data) async {
    final db = await database;
    return await db.update(
      'EXPENSES',
      data,
      where: 'id = ?',
      whereArgs: [data['id']],
    );
  }
}



