import 'package:final_cal/dashboardPage.dart';
import 'package:final_cal/login.dart';
import 'package:flutter/material.dart';
import 'package:final_cal/db_helper.dart';
import 'package:shared_preferences/shared_preferences.dart';

class SignupPage extends StatefulWidget {
  const SignupPage({super.key});

  @override
  _SignupPageState createState() => _SignupPageState();
}

class _SignupPageState extends State<SignupPage> {
  final nameController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();

  // State for toggling password visibility
  bool _obscurePassword = true;

  @override
  Widget build(BuildContext context) {
    final _formKey = GlobalKey<FormState>();

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text("Sign Up", style: TextStyle(color: Colors.white)),
        backgroundColor: const Color(0xFF010080),
        elevation: 0,
      ),
      body: Container(
        decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Color(0xFFD3E3FD),
                Color(0xFFFFFFFF),
                Color(0xFF505AD8),
              ],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            color: Color(0xFFFFFFFF)
        ),
        child: Form(
          key: _formKey,
          child: Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: ListView(
                shrinkWrap: true,
                children: [
                  const SizedBox(height: 20),
                  _buildTextField("Name", "Enter your name", Icons.person,
                    controller: nameController,
                    validator: (value) {
                      if (value == null || value.isEmpty) return 'Name is required';
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),
                  _buildTextField("Email", "Enter your email", Icons.email,
                    controller: emailController,
                    validator: (value) {
                      if (value == null || value.isEmpty) return 'Email is required';
                      if (!value.contains('@')) return 'Enter a valid email';
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),
                  _buildPasswordField("Password", "Enter your password", Icons.lock),
                  const SizedBox(height: 32),
                  SizedBox(
                    height: 50,
                    child: ElevatedButton(
                      onPressed: () async {
                        if (_formKey.currentState!.validate()) {
                          final name = nameController.text.trim();
                          final email = emailController.text.trim();
                          final password = passwordController.text.trim();

                          print("Entered name: $name");
                          print("Entered email: $email");
                          print("Entered password (hashed): ${DatabaseHelper().hashPassword(password)}");
                          print("Entered password: $password");

                          final hashedPassword = DatabaseHelper().hashPassword(password);
                          final userId = await DatabaseHelper().insertUser(name, email, hashedPassword);
                          await DatabaseHelper().printAllUsers();
                          print("Query result: $userId");
                          print('User saved!');

                          // Save login state and user id using shared preferences
                          final prefs = await SharedPreferences.getInstance();
                          await prefs.setString('username', name);
                          await prefs.setBool('isLoggedIn', true);
                          await prefs.setInt('userId', userId);

                          Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(builder: (context) => dashboardPage(userId: userId)),
                          );
                        } else {
                          print('Form is invalid!');
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF000000),
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text("Submit", style: TextStyle(fontSize: 16)),
                    ),
                  ),
                  const SizedBox(height: 20),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("Already a user?"),
                      TextButton(
                        onPressed: () {
                          Navigator.push(context,
                            MaterialPageRoute(builder: (context) => loginPage()),
                          );
                        },
                        child: const Text("Login"),
                      )
                    ],
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(String label, String hint, IconData icon,
      {bool obscureText = false,
        required String? Function(String?) validator,
        required TextEditingController controller}) {
    return TextFormField(
      controller: controller,
      validator: validator,
      obscureText: obscureText,
      decoration: InputDecoration(
        labelText: label,
        hintText: hint,
        hintStyle: TextStyle(
          color: Colors.grey[500],
          fontSize: 14,
          fontWeight: FontWeight.w400,
          fontStyle: FontStyle.normal,
          letterSpacing: 0.5,
        ),
        prefixIcon: Icon(icon, color: Color(0xFF000000)),
        focusedBorder: OutlineInputBorder(
          borderSide: const BorderSide(color: Color(0xFF010080), width: 2),
          borderRadius: BorderRadius.circular(12),
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  Widget _buildPasswordField(String label, String hint, IconData icon) {
    return TextFormField(
      controller: passwordController,
      obscureText: _obscurePassword,
      validator: (value) {
        if (value == null || value.length < 8) return 'Password must be of 8 characters';
        return null;
      },
      decoration: InputDecoration(
        labelText: label,
        hintText: hint,
        hintStyle: TextStyle(
          color: Colors.grey[500],
          fontSize: 14,
          fontWeight: FontWeight.w400,
          fontStyle: FontStyle.normal,
          letterSpacing: 0.5,
        ),
        prefixIcon: Icon(icon, color: Color(0xFF000000)),
        focusedBorder: OutlineInputBorder(
          borderSide: const BorderSide(color: Color(0xFF010080), width: 2),
          borderRadius: BorderRadius.circular(12),
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        suffixIcon: IconButton(
          icon: Icon(
            _obscurePassword ? Icons.visibility_off : Icons.visibility,
            color: Color(0xFF000000),
          ),
          onPressed: () {
            setState(() {
              _obscurePassword = !_obscurePassword;
            });
          },
        ),
      ),
    );
  }
}

