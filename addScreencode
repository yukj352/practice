import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:final_cal/db_helper.dart';
import 'item_model.dart';

class addScreenPage extends StatefulWidget {
  final int userId;
  final Item? item;
  const addScreenPage({super.key,required this.userId,this.item});

  @override
  State<addScreenPage> createState() => _addScreenPageState();
}

class _addScreenPageState extends State<addScreenPage> {
  final _formKey = GlobalKey<FormState>();
  String? _selectedCategory;
  DateTime selectedDate = DateTime.now();

  //submit expense database connectivity
  void _submitExpense() async{
    if(_formKey.currentState!.validate() &&
        _selectedCategory !=null &&
        selectedDate!= null){
      final expense={
        'userId': widget.userId,
        'name': _nameController.text.trim(),
        'category': _selectedCategory,
        'amount': double.parse(_amtController.text),
        'quantity': double.parse(_qtyController.text),
        'date': DateFormat('dd-mm-yyyy').format(selectedDate!),
        'description': _desController.text.trim(),
      };
      if(widget.item == null){
        await DatabaseHelper().addExpense(expense);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Item added successfully!'),
            backgroundColor: Colors.black87,
          ),
        );
      }
      else{
        await DatabaseHelper().updateExpense(widget.item!.id,expense);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Item updated successfully!'),
            backgroundColor: Colors.black87,
          ),
        );
      }


      await Future.delayed(Duration(milliseconds: 800));
      Navigator.pop(context,true);
    }
    else{
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text
            ('Please fill out the details'),
          ));
    }
  }


  TextEditingController _nameController = TextEditingController();
  TextEditingController _amtController = TextEditingController();
  TextEditingController _qtyController = TextEditingController();
  TextEditingController _desController = TextEditingController();

  @override
  void initState(){
    super.initState();

    if(widget.item!= null){
      final item = widget.item!;
      _nameController.text = item.name;
      _amtController.text = item.amt.toString();
      _qtyController.text = item.qty.toString();
      _desController.text = item.description;
      _selectedCategory = item.category;
      selectedDate = item.date;
    }
  }



  final List<String> categories = [
    'food',
    'travel',
    'utilities',
    'health and medical',
    'savings',
    'shopping',
    'housing',
    'others',
  ];

  Future<void> _pickDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      setState(() {
        selectedDate = picked;
      });
    }
  }

  void _addItem() {
    if (_formKey.currentState!.validate()) {
      print('Item Added');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios_new),
          color: Color(0xFFF7F4F2),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title:  Text(
          widget.item == null ? "Add Item To Tracker" : "Edit Item",
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: const Color(0xFF010080),
        elevation: 0,
      ),
      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFD3E3FD), Color(0xFFFFFFFF), Color(0xFF505AD8)],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
          color: Color(0xFFFFFFFF),
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Category dropdown (styled)
                  const SizedBox(height: 16),
                  TextFormField(
                    controller: _nameController,
                    decoration: const InputDecoration(
                      labelText: 'Item Name',
                      border: OutlineInputBorder(),
                    ),
                    validator: (val) => val!.isEmpty ? 'Enter Item Name' : null,
                  ),
                  const SizedBox(height: 16),
                  SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: PopupMenuButton<String>(
                      onSelected: (val) =>
                          setState(() => _selectedCategory = val),
                      itemBuilder: (context) => categories.map((cat) {
                        return PopupMenuItem<String>(
                          value: cat,
                          child: Text(cat),
                        );
                      }).toList(),
                      // child: ListTile(
                      //   title: Text(_selectedCategory ?? 'Choose Category'),
                      //   trailing: Icon(Icons.arrow_drop_down),
                      // ),
                      child: Container(
                        alignment: Alignment.centerLeft,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12.0,
                          vertical: 8.0,
                        ),
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.grey),
                          borderRadius: BorderRadius.circular(4.0),
                        ),
                        child: Row(
                          // mainAxisSize: MainAxisSize.min,
                          children: [
                            Expanded(
                              child: Text(
                                _selectedCategory ?? 'Choose Category',
                                style: TextStyle(fontSize: 16.0),
                              ),
                            ),
                            Icon(Icons.arrow_drop_down),
                          ],
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  TextFormField(
                    controller: _amtController,
                    decoration: const InputDecoration(
                      labelText: 'Amount',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                    validator: (val) => val!.isEmpty ? 'Enter Amount' : null,
                  ),
                  const SizedBox(height: 16),
                  TextFormField(
                    controller: _qtyController,
                    decoration: const InputDecoration(
                      labelText: 'Quantity',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                  const SizedBox(height: 23),
                  Material(
                    color: Colors.transparent,
                    child: InkWell(
                      onTap: _pickDate,
                      borderRadius: BorderRadius.circular(4),
                      highlightColor: const Color(0xFFF7F4F2),
                      child: InputDecorator(
                        decoration: const InputDecoration(
                          labelText: 'Date',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 16,
                          ),
                        ),
                        child: Text(
                          DateFormat('yyyy-MM--dd                                                EEE').format(selectedDate),
                          style: const TextStyle(
                            fontSize: 16,
                            color: Colors.black87,
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  TextFormField(
                    controller: _desController,
                    decoration: const InputDecoration(
                      labelText: 'Description',
                      border: OutlineInputBorder(),
                      isDense: true
                    ),
                    maxLines: 3,
                    textAlignVertical: TextAlignVertical.top,
                  ),
                  const SizedBox(height: 20),
                  SizedBox(
                    height: 40,
                    width: 90,
                    child: ElevatedButton(
                      onPressed: _submitExpense,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF000000),
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                      ),
                      child:  Text(
                        widget.item == null ? 'Add' : 'Edit',style: TextStyle(fontSize: 16),),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}

