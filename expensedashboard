import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:final_cal/addScreenPage.dart';
import 'package:final_cal/db_helper.dart';
import 'itemDashboard.dart';
import 'login.dart';
import 'profilePage.dart';  // <-- Make sure you have this file and correct path
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'settings.dart';


class dashboardPage extends StatefulWidget {
  final int userId;
  const dashboardPage({super.key, required this.userId});

  @override
  State<dashboardPage> createState() => _dashboardPageState();
}

class _dashboardPageState extends State<dashboardPage> {
  File? _profileImage;
  final ImagePicker _picker = ImagePicker();
  int _selectedIndex = 0; // Home tab index

  late int currentUserId;
  String _userName ='';
  String _userEmail='';

  TextEditingController _tacon = TextEditingController();
  TextEditingController _sacon = TextEditingController();
  TextEditingController _racon = TextEditingController();
  TextEditingController _goalcon = TextEditingController();
  bool _incomeSet=false;//to control initial popup

  String? _username;

  @override
  void initState() {
    super.initState();
    currentUserId = widget.userId;
    WidgetsBinding.instance.addPostFrameCallback((_) {

      _loadUserName();
      _loadUserData();
      Future.delayed(Duration(seconds: 2),(){
        _checkSavedIncome();
      });
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _loadUserData();
  }


  Future<void> _loadUserName() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _username = prefs.getString('username') ?? 'User';
    });
  }


  Future<void> _loadUserData() async {
    final userData = await DatabaseHelper().getUserById(currentUserId);
    if(userData != null){
      setState(() {
        _userName = userData?['name'] ?? '';
        _userEmail = userData?['email'] ?? '';
      });
    }

  }

  Future<void> _checkSavedIncome() async {
    final prefs = await SharedPreferences.getInstance();
    double? savedIncome = prefs.getDouble('total_income_$currentUserId');

    if (savedIncome != null && savedIncome > 0) {
      setState(() {
        _tacon.text = savedIncome.toStringAsFixed(2);
        _goalcon.text = (0.15 * savedIncome).toStringAsFixed(2);
      });

      _loadTotalSpent(); // ✅ Use saved income to calculate
    } else {
      _showIncomeInputDialog(); // ❌ Not set yet — ask user
    }
  }

  Future<void> _showIncomeInputDialog() async {
    final TextEditingController tempIncomeController = TextEditingController();
    final TextEditingController tempGoalController = TextEditingController();

    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          title: Text('Enter Total Income'),
          content: SizedBox(
            width:200,
            height:145,
            child: Column(
              children: [
                TextField(
                  controller: tempIncomeController,
                  keyboardType: TextInputType.numberWithOptions(decimal: true),
                  decoration: InputDecoration(hintText: 'Total Income'),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: tempGoalController,
                  keyboardType: TextInputType.numberWithOptions(decimal: true),
                  decoration: InputDecoration(hintText: 'Saving Amount (Optional)'),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () async{
                double total = double.tryParse(tempIncomeController.text) ?? 0.0;
                double savingGoal = double.tryParse(tempGoalController.text) ?? 0.0;

                if (total <= 0) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text("Please enter a valid income")),
                  );
                  return;
                }
                final prefs = await SharedPreferences.getInstance();
                await prefs.setDouble('total_income_$currentUserId',total);
                await prefs.setDouble('goal_amount_$currentUserId',savingGoal);

                setState(() {
                  _tacon.text = total.toStringAsFixed(2);
                  _goalcon.text = (0.15 * total).toStringAsFixed(2);
                  _incomeSet = true;
                });

                Navigator.pop(context);
                _loadTotalSpent(); // Also calculates remaining
              },
              child: Text('Submit'),
            ),
          ],
        );
      },
    );
  }


  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery, imageQuality: 70);

    if (pickedFile != null) {
      setState(() {
        _profileImage = File(pickedFile.path);
      });
    }
  }


  void remamount() {
    double total = double.tryParse(_tacon.text) ?? 0.0;
    double spent = double.tryParse(_sacon.text) ?? 0.0;
    double goal = double.tryParse(_goalcon.text) ?? 0.0;

    if (total == 0.0) return;
    double rem = total - spent;

    if (spent > total) {
      // Alert for spending more than total income
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Alert'),
          content: Text('Spent is more than your total income!'),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  _sacon.text = '0.0'; // Reset the spent value
                  _racon.text = '0.0'; // Reset the remaining value
                });
                Navigator.pop(context);
              },
              child: Text('OK'),
            ),
          ],
        ),
      );
    }
    else if (spent > goal) {
      // Alert if spent exceeds saving goal
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Alert'),
          content: Text('Spent exceeds your saving goal!'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text('OK'),
            ),
          ],
        ),
      );
    }
    else {
      setState(() {
        _racon.text = rem.toStringAsFixed(2);
      });
    }
  }

  Future<void> _loadTotalSpent() async {
    final data = await DatabaseHelper().getExpenses(widget.userId);
    double totalSpent = 0.0;

    for (var item in data) {
      totalSpent += (item['amount'] as num).toDouble();
    }
    if (mounted) {
      setState(() {
        _sacon.text = totalSpent.toStringAsFixed(2);
      });
      remamount();
    }
  }

  void _exitApp() {
    if (Platform.isAndroid) {
      SystemNavigator.pop();
    } else if (Platform.isIOS) {
      exit(0);  // Force exit for iOS (not recommended for production)
    }
  }

  void _onItemTapped(int index) async {
    if (index == _selectedIndex) return;

    if (index == 0) {
      // home - maybe do nothing or refresh
    } else if (index == 1) {
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => itemDashboard(userId: currentUserId)));
    } else if (index == 2) {
      final updated = await Navigator.push<bool>(
        context,
        MaterialPageRoute(builder: (_) => profilePage(userId: currentUserId)),
      );

      if (updated == true) {
        _loadUserData(); // reload user data after returning from profile update
      }
    }
  }



  Widget _buildInputField(TextEditingController controller, {bool enabled = false,String label=''}) {
    return SizedBox(
      height: 40,
      width: double.infinity,
      child: Material(
        elevation: 5,
        borderRadius: BorderRadius.circular(12),
        child: TextField(
          controller: controller,
          readOnly: !enabled,
          onChanged: enabled ? (_) => remamount() : null,
          decoration: InputDecoration(
            contentPadding: EdgeInsets.symmetric(horizontal: 12),
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide.none,
            ),
            suffixIcon: enabled
                ? IconButton(
              icon: Icon(Icons.edit),
              onPressed: () {
                // Toggle enabled state to allow editing
                setState(() {
                  enabled = true;
                });
              },
            )
                : null,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: IconThemeData(color: Colors.white),
        leading: Builder(
          builder: (context) => IconButton(
            icon: Icon(Icons.menu),       // <-- Hamburger drawer icon
            color: Color(0xFFF7F4F2),
            onPressed: () {
              Scaffold.of(context).openDrawer();  // <-- Open the drawer
            },
          ),
        ),
        title: const Text(
          "FinFlow",
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: const Color(0xFF010080),
        elevation: 0,
        actions: [
      PopupMenuButton<String>(
      onSelected: (value) async {
    if (value == 'Item Dashboard') {
    await Navigator.push(
    context,
    MaterialPageRoute(
    builder: (context) => itemDashboard(userId: widget.userId),
    ),
    );
    _loadTotalSpent();
    } else if (value == 'Exit') {
    // Exit action
    _exitApp();
    }
    },
      itemBuilder: (BuildContext context) {
        return [
          PopupMenuItem<String>(
            value: 'Item Dashboard',
            child: Text(
              'Item Details',
              style: TextStyle(
                color: Color(0xFF040104),
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
          ),
          PopupMenuItem<String>(
            value: 'Exit',
            child: Text(
              'Exit',
              style: TextStyle(
                color: Color(0xFF040104),
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
          ),
        ];
      },
    )

    ],
      ),


      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            UserAccountsDrawerHeader(
              decoration: BoxDecoration(
                color: Color(0xFF010080),
              ),
              accountName: Text(_username ?? 'User'),
              accountEmail: null,
              currentAccountPicture: GestureDetector(
                onTap: _pickImage,
                child:  CircleAvatar(
                  backgroundImage: _profileImage != null
                      ? FileImage(_profileImage!)
                      : AssetImage('assets/img.png') as ImageProvider,
                  backgroundColor: Colors.transparent,
                ),
              ),

            ),
            ListTile(
              leading: Icon(Icons.dashboard),
              title: Text('Dashboard'),
              onTap: () {
                Navigator.pop(context); // close drawer
                if (_selectedIndex != 0) {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => dashboardPage(userId: widget.userId)),
                  );
                }
              },
            ),
            ListTile(
              leading: Icon(Icons.list),
              title: Text('All Items'),
              onTap: () {
                Navigator.pop(context);
                if (_selectedIndex != 1) {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => itemDashboard(userId: widget.userId)),
                  );
                }
              },
            ),
            ListTile(
              leading: Icon(Icons.person),
              title: Text('Profile'),
              onTap: () {
                Navigator.pop(context);
                if (_selectedIndex != 2) {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => profilePage(userId: currentUserId)),
                  );
                }
              },
            ),
            Divider(),
            ListTile(
              leading: Icon(Icons.settings),
              title: Text('Settings'),
              onTap: () {
                Navigator.pop(context); // Close the drawer first
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => SettingsPage(userId: currentUserId)),
                );
              },
            ),

            ListTile(
              leading: Icon(Icons.logout),
              title: Text('Logout'),
              onTap: () async {
                Navigator.pop(context);
                final prefs = await SharedPreferences.getInstance();
                await prefs.remove('isLoggedIn');
                await prefs.remove('userId');
                await prefs.remove('username');
                Navigator.pushAndRemoveUntil(
                  context,
                  MaterialPageRoute(builder: (_) => loginPage()),
                      (_) => false,
                );
              },
            ),
          ],
        ),
      ),

      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFFD3E3FD),
              Color(0xFFFFFFFF),
              Color(0xFF505AD8),
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(32.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Material(
                color: Color(0xFFC6D8FF),
                borderRadius: BorderRadius.circular(12),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ListTile(
                    leading: CircleAvatar(
                      radius: 30,
                      backgroundImage: AssetImage('assets/img.png'),
                      backgroundColor: Colors.transparent,
                    ),
                    title: Text(
                      "Welcome ${_username ?? ''}",
                      style: TextStyle(
                          fontSize: 20,
                          color: Colors.black87,
                          fontWeight: FontWeight.bold),
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                ),
              ),
              SizedBox(height: 30),

              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Total Income', style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 10),
                      Container(
                        width: 300,
                        alignment: Alignment.centerLeft,
                        child: _buildInputField(_tacon, enabled: true),
                      ),
                      SizedBox(height: 10),
                      Text('Saving Amount', style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 10),
                      Container(
                        width: 300,
                        alignment: Alignment.centerLeft,
                        child: _buildInputField(_goalcon, enabled: true),
                      ),
                      SizedBox(height: 10),
                      Text('Spent Amount', style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 10),
                      Container(
                        width: 300,
                        alignment: Alignment.centerLeft,
                        child: _buildInputField(_sacon),
                      ),

                      SizedBox(height: 10),
                      Text('Remaining Amount', style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 10),
                      Container(
                        width: 300,
                        alignment: Alignment.centerLeft,
                        child: _buildInputField(_racon),
                      ),

                      SizedBox(height: 30),

                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        backgroundColor: Color(0xFF010080), // Your app's blue background
        selectedItemColor: Colors.white,     // White for selected icon & label
        unselectedItemColor: Colors.white70,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home_filled), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Item Details'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),
      floatingActionButton: _selectedIndex == 0
          ? FloatingActionButton(
        child: Icon(Icons.add),
        tooltip: 'Add Expense',
        backgroundColor: Color(0xFF010080),
        foregroundColor: Color(0xFFFFF7FE),
        onPressed: () async {
          await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) =>
                  addScreenPage(userId: widget.userId),
            ),
          );
          _loadTotalSpent();
        },
      )
          : null,
    );
  }
}


